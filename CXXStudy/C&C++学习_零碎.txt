┌──────────────────────┐
│%02x与%2x 之间的区别：│
└──────────────────────┘
	输出最小宽度
	用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出
	若实际位数少于定义的宽度则补以空格或0(当最小宽度数值以0开头时)。

	X 表示以十六进制形式输出
	02 表示不足两位，前面补0输出；如果超过两位，则实际输出
	举例：
	printf("%02X", 0x345);  //打印出：345
	printf("%02X", 0x6); //打印出：06

	而如果直接写为 %2x，数据不足两位时，实际输出，即不额外补0输出； 如果超过两位，则实际输出。
	printf("%2X", 0x345);  //打印出：345
	printf("%2X", 0x6); //打印出：6

┌──────────────┐
│一维数组遍历：│
└──────────────┘	
	//通过数组名（首地址）遍历（指针遍历）
    int var[3] = { 1,2,3 };
    int *ptr;
    ptr = var;   //指针中的数组地址

    for (int i = 0; i < 3; i++) {
        qDebug() << *ptr;
        ptr++;
    }
	
	//下标遍历
	int var[3] = { 1,2,3 };
	for (int i = 0; i < 3; i++) {
        qDebug() << var[i]
    }

┌───────────────────┐
│指针与const限定符：│
└───────────────────┘	
	指向const对象的指针：保存const对象的地址，const修饰符在数据类型前
	(1)可以用非const对象的地址赋值;
	(2)不允许将const对象的地址赋值给普通的、非 const 对象的指针（void *类型指针同上）;
	(3)指向const或者非const对象，都无法通过自身修改对象值；
		ps:如果指向非const对象，可以使用新的普通指针指向这个对象，
			然后通过新指针修改对象值。
	
	指向普通对象的const指针：保存普通对象的地址，const修饰符在指针变量名前
	(1)必须在定义时初始化；
	(2)本身的值不能修改，不允许赋值也即不能指向其他对象；
	(3)不允许指向const对象；
	
	指向const对象的const指针：保存const对象的地址
	(1)必须在定义时初始化；
	(2)不允许修改指向的对象的值；
	(3)不允许修改指针的指向；
	ps:以下三种定义效果完全相同
		string s;
		typedef string *pstring;
		const pstring cstr1 = &s; 
		pstring const cstr2 = &s;
		string *const cstr3 = &s;

┌──────────────┐
│指针算数运算：│
└──────────────┘			
	指针变量加/减一个整数

	例如：p++，p--，p+i，p-i，p+-i，p-=i等。

	C++规定，一个指针变量加/减一个整数是将该指针变量的原值(是一个地址)和它指向的变
	量所占用的内存单元字节数相加或相减。
	如p+i代表这样的地址计算：p+i*d，d为p所指向的变量单元所占用的字节数。这样才能保
	证p+i指向p下面的第i个元素

┌──────────────────┐
│string类构造函数：│
└──────────────────┘		
	      default (1)  string();	
	         copy (2)  string (const string& str);	
	    substring (3)  string (const string& str, size_t pos, size_t len = npos);	
	from c-string (4)  string (const char* s);	
	from sequence (5)  string (const char* s, size_t n);	
			 fill (6)  string (size_t n, char c);	
	        range (7)  template <class InputIterator>
				         string  (InputIterator first, InputIterator last);

┌──────────┐
│隐式转换：│
└──────────┘						 
	算术类型转换为bool型时，0转换为false,其他值转换为true；
	bool型转换Wie算术类型时，true转换为1，false转换为0；
	枚举类型自动转换为整型；
┌───────────────────┐
│try-catch捕获异常：│
└───────────────────┘	
	exception        最常见的问题。
	runtime_error    运行时错误：仅在运行时才能检测到问题
	range_error      运行时错误：生成的结果超出了有意义的值域范围
	overflow_error   运行时错误：计算上溢
	underflow_error  运行时错误：计算下溢
	logic_error      逻辑错误：可在运行前检测到问题
	domain_error     逻辑错误：参数的结果值不存在
	invalid_argument 逻辑错误：不合适的参数
	length_error     逻辑错误：试图生成一个超出该类型最大长度的对象
	out_of_range     逻辑错误：使用一个超出有效范围的值
	bad_alloc		 无法分配内存
	
	捕获异常示例：
	try {
        mServer = new CMWUsbVideoService();
    } catch (const std::bad_alloc& e) {
        ::exit(EXIT_FAILURE);
    }
┌──────────┐
│函数参数：│
└──────────┘
	参数分为形参与实参：
		形参为函数声明与定义时候的参数；
		实参为函数调用时的赋值的参数；
		
	形参可分为非引用形参与引用形参
		非引用形参通过复制对应的实参实现初始化，修改非引用形参仅仅改变
		局部副本的值，主调函数的实参值没有改变；
		
		非引用形参包括：普通形参、指针形参、const形参；
		
		引用形参直接关联实参，并非对象的副本，形参改变主调函数的实参跟着改变；
		
	const引用形参
		不需要修改的引用形参应该定义为const引用，普通非const形参使用时不灵活，即
		不能用const对象初始化，也不能用字面值或产生右值的表达式实参初始化。
		
	指针引用：int n = 2; int *pn = &n; int *&p = pn;
	
┌────────────┐
│函数返回值：│
└────────────┘
	当返回非引用类型时，都会在函数调用处复制返回值；
	不返回局部对象的引用；
	不返回指向局部对象的指针；
	
┌────────────────┐
│指向函数的指针：│
└────────────────┘


┌──────────────────────────┐
│c++11中使用using指定别名：│
└──────────────────────────┘
	基本作用与typedef相同，为某种类型指定别名，但从代码可读性以
	及功能性上来看，使用using优于typedef
	
	使用方法：
		using value_type = _Ty，以后使用value_type value; 就代表_Ty value
	
	与typdef对比
		(1)指定函数指针别名
		typedef:
			typedef void (*FP) (int, const std::string&);
		using:
			using FP = void (*) (int, const std::string&);
			上述指定了FP是一个别名，代表一个函数指针，指针指向的函数返回类型为void，
			接受的参数是int与const std::string&
		
		(2)指定模板别名
		typedef: 不支持
		using: 
			template <typename T>
			using Vec = MyVector<T, MyAlloc<T>>;
			 
			// usage
			Vec<int> vec;

┌──────────┐
│设计模式：│
└──────────┘
	工厂模式：
	产品与工厂直接关系
	(1)简单工厂模式
		对于创建过程进行简单封装，不同商品子类继承商品基类，工厂类中根据商品类型
		创建对应商品子类实例，商品子类实例以商品基类指针形式存在；
		ProductBase * createProduct(ProductType type)
		{
			ProductBase *t_product = NULL;
			switch (type) {
			case PenType:
				t_product = new Pen();
				break;
			case RubberType:
				t_product = new Rubber();
				break;
			default:
				break;
			}
			return t_product;
		}
		
	(2)工厂方法模式
		抽象出商品基类以及工厂基类，不同商品子类继承自商品基类，不同工厂子类继承自
		工厂基类，不同工厂子类对应不同商品子类;
		class FactoryA:public Factory{
		public:
			Product *createProduct(){
				return new ProductA();
			}
		};
		class FactoryB:public Factory{
		public:
			Product *createProduct(){
				return new ProductB();
			}
		};
		
		Factory *factoryA=new FactoryA();
		Product *productA = factoryA->createProduct();
		Factory *factoryB=new FactoryB();
		Product *productB = factoryB->createProduct();
		
	(3)抽象工厂模式
		商品子类按照高端和低端分别定义，工厂子类按照高端和低端分别定义，高端工厂子类
		对应高端商品子类，低端工厂子类对应低端商品子类；
		
		class Factory1 : public Factory//低端工厂用于生产低端产品
		{
		public:
		ProductA *CreateProductA()
		{
		return new ProductA1();
		}
		ProductB *CreateProductB()
		{
		return new ProductB1();
		}
		};
		class Factory2 : public Factory//高端工厂用于生产高端产品
		{
		ProductA *CreateProductA()
		{
		return new ProductA2();
		}
		ProductB *CreateProductB()
		{
		return new ProductB2();
		}
		};
		Factory *factory1 = new Factory1();
		ProductA *productA1 = factory1->CreateProductA();
		ProductB *productB1 = factory1->CreateProductB();

		Factory *factory2 = new Factory2();
		ProductA *productA2 = factory2->CreateProductA();
		ProductB *productB2 = factory2->CreateProductB();
┌──────────┐
│可变参数：│
└──────────┘
	C/C++中可变参数的实现需要包含stdarg.h，stdarg中提供了可变参数的相关宏定义。
	具体实现例子如下：
		例1：
		void variable(int i, ...)
		{
			int j = 0;
			va_list arg_ptr;	//定义一个可变参数列表指针
			va_start(arg_ptr, i);	//控制可变参数列表指针指针指向函数中最后一个固定参数

			while( j != -1 )
			{
				j = va_arg(arg_ptr, int);	//返回参数列表中下一个int型的值
				printf("%d ",j );
			}
			va_end(arg_ptr);	//清空参数列表，收回内存
		}
		
		例2：
		int sum(int num_args, ...)
		{
		   int val = 0;
		   va_list ap;
		   int i;

		   va_start(ap, num_args);
		   for(i = 0; i < num_args; i++) 
		   {
			  val += va_arg(ap, int);
		   }
		   va_end(ap);
		 
		   return val;
		}
	
	其中使用以下几个宏定义：
		va_list:
			可以定义一个指针，用于指向可变参数列表
		va_start(va_list arg_ptr, last_arg):
			初始化va_list定义的指针，控制可变参数列表指针指向最后一个固定参数last_arg，
			最后一个固定参数即省略号的前一个参数
		va_arg(va_list arg_ptr, type):
			检索可变参数列表指针指向的下一个类型为type的参数，并返回检索值
		va_end(va_list arg_ptr):
			清空被va_start初始化的可变参数列表指针，收回分配的内存等，最终允许
			函数正常返回，如果在函数返回前未调用va_end，结果为未定义
	
	ps:
		C++中由于多态性的存在，部分情况下允许函数重载来处理可变参数的问题，但C中没有重载，
	可以通过以上方式处理这种问题。
	ps:
		由于va_arg检索可变参数列表时，无法判断检索到的参数是否为最后一个参数，所以一般情况下
	会预先设定参数列表尾部标志(例1)或者最后一个固定参数设定为可变参数个数(例2)等等，通过这样
	的方法来帮助确定可变参数列表结束标志。
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		